"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { ChevronLeft, Wand2, Save } from 'lucide-react';
import toast from 'react-hot-toast';
import './generate.css'; // New, dedicated CSS for this page

// --- DUMMY DATA ---
const mockCapabilities = [
  "Data Leadership & Culture",
  "Data Governance",
  "Data Security & Privacy",
  "Analytics & Visualization"
];

const aiGeneratedRecommendation = {
  title: "Implement a Data Stewardship Program",
  description: "To improve data quality and accountability, assign Data Stewards within each business department. Stewards will be responsible for defining data elements, monitoring quality, and resolving issues for their specific data domain. This creates clear ownership and is a key step for organizations in the medium maturity tier."
};

// --- Main Page Component ---
export default function GenerateRecommendationPage() {
  const router = useRouter();
  
  // --- State Management ---
  // Step 1: Context Selection
  const [capability, setCapability] = useState('');
  const [tier, setTier] = useState<'Low' | 'Medium' | 'High'>('Medium');
  
  // Step 2: AI Generation & Editing
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedTitle, setGeneratedTitle] = useState('');
  const [generatedDescription, setGeneratedDescription] = useState('');
  
  const handleGenerate = () => {
    if (!capability) {
      toast.error("Please select a capability first.");
      return;
    }
    setIsGenerating(true);
    // In a real app, this would be an API call to the AI backend
    setTimeout(() => {
      setGeneratedTitle(aiGeneratedRecommendation.title);
      setGeneratedDescription(aiGeneratedRecommendation.description);
      setIsGenerating(false);
      toast.success("Recommendation generated by AI!");
    }, 1500); // Simulate API delay
  };

  const handleSave = () => {
    // In a real app, this would be a POST/PUT API call
    toast.success("Recommendation saved to library!");
    router.push('/Admin/recommendations');
  };

  return (
    <div className="generate-page-container">
      <header className="page-header">
        <div>
          <button onClick={() => router.push('/Admin/recommendations')} className="back-link">
            <ChevronLeft size={18} /> Back to Library
          </button>
          <h1 className="page-title">Generate Recommendation</h1>
        </div>
      </header>
      
      <div className="workflow-container">
        {/* --- Step 1: Context --- */}
        <div className="workflow-step">
          <div className="step-header">
            <span className="step-number">1</span>
            <h2>Set the Context</h2>
          </div>
          <p className="step-description">Select the capability and score tier this recommendation applies to.</p>
          <div className="form-grid">
            <div className="form-group">
              <label>Target Capability</label>
              <select value={capability} onChange={e => setCapability(e.target.value)} className="form-input">
                <option value="" disabled>-- Select a Capability --</option>
                {mockCapabilities.map(cap => <option key={cap} value={cap}>{cap}</option>)}
              </select>
            </div>
            <div className="form-group">
              <label>Target Score Tier</label>
              <select value={tier} onChange={e => setTier(e.target.value as any)} className="form-input">
                <option value="Low">Low Tier (&lt;50%)</option>
                <option value="Medium">Medium Tier (50-79%)</option>
                <option value="High">High Tier (80%+)</option>
              </select>
            </div>
          </div>
        </div>

        {/* --- Step 2: Generation --- */}
        <div className="workflow-step">
          <div className="step-header">
            <span className="step-number">2</span>
            <h2>Generate with AI</h2>
          </div>
          <p className="step-description">The AI will create a detailed, actionable recommendation based on the context you provided.</p>
          <button className="btn btn-primary generate-btn" onClick={handleGenerate} disabled={isGenerating || !capability}>
            <Wand2 size={18} /> {isGenerating ? 'Generating...' : 'Generate Recommendation'}
          </button>
        </div>

        {/* --- Step 3: Review & Save --- */}
        {(generatedTitle || generatedDescription) && (
          <div className="workflow-step">
            <div className="step-header">
              <span className="step-number">3</span>
              <h2>Review and Save</h2>
            </div>
            <p className="step-description">Edit the generated text as needed, then save it to your library.</p>
            <div className="form-grid">
              <div className="form-group full-width">
                <label>Recommendation Title</label>
                <input type="text" value={generatedTitle} onChange={e => setGeneratedTitle(e.target.value)} className="form-input" />
              </div>
              <div className="form-group full-width">
                <label>Recommendation Description</label>
                <textarea value={generatedDescription} onChange={e => setGeneratedDescription(e.target.value)} className="form-textarea" rows={6}></textarea>
              </div>
            </div>
            <div className="save-action">
              <button className="btn btn-primary save-btn" onClick={handleSave}>
                <Save size={18} /> Save to Library
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}